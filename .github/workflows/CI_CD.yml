name: CI-CD

on:
  schedule:
    - cron: "0 1 * * 0" # Weekly on Sunday at 1:00 a.m.

  push:
    branches:
      - main

  workflow_dispatch:
    inputs:
      PYTHON_BUILD_VERSION:
        description: 'Python version to build with. Does not set matrix for QC and testing; just sets version for build jobs.'
        type: string
        default: "3.12"
      TEST_OR_PROD:
        description: 'Publish to test or prod? Default ("dev") skips publishing except on push to main, which publishes to test.'
        type: string
        default: 'dev'

  workflow_call:
    inputs:
      TEST_OR_PROD:
        description: 'Publish to test or prod? Default ("dev") skips publishing except on push to main, which publishes to test.'
        type: string
        default: 'dev'
    secrets:
      ACTIONS_DEPLOY_KEY:
        required: false
      CHECKOUT_SHARED:
        required: true
      SAFETY_API_KEY:
        required: true

defaults:
  run:
    shell: bash -el {0}

env:
  CONDA_VERSION: latest
  PACKAGE_TEST_WAIT_TIME: 120
  PYTHON_BUILD_VERSION_DEFAULT: "3.12"

jobs:
  set-inputs:
    name: Set Inputs
    runs-on: ubuntu-latest
    outputs:
      PYTHON_BUILD_VERSION: ${{ steps.set-python-version.outputs.PYTHON_BUILD_VERSION }}
      TEST_OR_PROD: ${{ steps.set-test.outputs.TEST_OR_PROD }}

    steps:
      - name: Set Python Version
        id: set-python-version
        run: |
          if [ -z "${{ inputs.PYTHON_BUILD_VERSION }}" ]; then
            echo "PYTHON_BUILD_VERSION=${{ env.PYTHON_BUILD_VERSION_DEFAULT }}" >> $GITHUB_OUTPUT
          else
            echo "PYTHON_BUILD_VERSION=${{ inputs.PYTHON_BUILD_VERSION }}" >> $GITHUB_OUTPUT
          fi

      - name: Set Test or Prod
        id: set-test
        run: |
          # IF this is a push to main, publish to test.
          if [ "${{ github.event_name }}" == "push" ] && [ "${{ github.ref_name }}" == "main" ]; then
            echo "TEST_OR_PROD=test" >> $GITHUB_OUTPUT
          else
            echo "TEST_OR_PROD=${{ inputs.TEST_OR_PROD }}" >> $GITHUB_OUTPUT
          fi

  CI:
    name: QC and Tests
    needs: set-inputs
    uses: crickets-and-comb/shared/.github/workflows/CI.yml@main
    secrets:
      CHECKOUT_SHARED: ${{ secrets.CHECKOUT_SHARED }}
      SAFETY_API_KEY: ${{ secrets.SAFETY_API_KEY }}

  build-dist:
    name: Build Dist
    needs: [CI, set-inputs]
    uses: crickets-and-comb/shared/.github/workflows/build_dist.yml@main
    with:
      DIST_DIR: "dist"
      PYTHON_BUILD_VERSION: ${{ needs.set-inputs.outputs.PYTHON_BUILD_VERSION }}
      PYTHON_PACKAGE_DIST_NAME: python-package-distributions
      # Allows a test build locally without uploading.
      UPLOAD_DIST: ${{ needs.set-inputs.outputs.TEST_OR_PROD == 'test' || needs.set-inputs.outputs.TEST_OR_PROD == 'prod' }}
    secrets:
      CHECKOUT_SHARED: ${{ secrets.CHECKOUT_SHARED }}

  publish-to-testpypi:
    name: Publish to TestPyPI
    needs: [build-dist, set-inputs]
    if: ${{ needs.set-inputs.outputs.TEST_OR_PROD == 'test' }}
    runs-on: ubuntu-latest
    environment:
      name: testpypi
      url: https://test.pypi.org/p/${{ github.repository }}
    permissions:
      id-token: write

    steps:
      - name: Download Dist
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: "dist"

      - name: Publish to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          packages-dir: "dist"
          verify-metadata: false

  publish-to-pypi:
    name: Publish to PyPi
    needs: [build-dist, set-inputs]
    if: ${{ needs.set-inputs.outputs.TEST_OR_PROD == 'prod' }}
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/${{ github.repository }}
    permissions:
      id-token: write

    steps:
      - name: Download Dist
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: "dist"

      - name: Publish to PyPi
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: "dist"
          verify-metadata: false

  github-release:
    name: Sign Sistribution with Sigstore and Upload to GitHub Release
    needs: [publish-to-pypi, set-inputs]
    uses: crickets-and-comb/shared/.github/workflows/release_to_github.yml@main
    permissions:
      contents: write
      id-token: write
    with:
      DIST_DIR: "dist"
      PYTHON_BUILD_VERSION: ${{ needs.set-inputs.outputs.PYTHON_BUILD_VERSION }}
      PYTHON_PACKAGE_DIST_NAME: python-package-distributions
    secrets:
      CHECKOUT_SHARED: ${{ secrets.CHECKOUT_SHARED }}

  wait-to-test-test:
    name: Wait for Test Publish to Propagate
    needs: publish-to-testpypi
    runs-on: ubuntu-latest
    steps:
      - name: Wait
        run: sleep ${{ env.PACKAGE_TEST_WAIT_TIME }}
  
  wait-to-test-prod:
    name: Wait for Prod Publish to Propagate
    needs: publish-to-pypi
    runs-on: ubuntu-latest
    steps:
      - name: Wait
        run: sleep ${{ env.PACKAGE_TEST_WAIT_TIME }}

  test-install-test:
    name: Test Test Install
    needs: wait-to-test-test
    uses: crickets-and-comb/shared/.github/workflows/test_install.yml@main
    with:
      TEST_OR_PROD: 'test'
    secrets:
      CHECKOUT_SHARED: ${{ secrets.CHECKOUT_SHARED }}

  test-install-prod:
    name: Test Prod Install
    needs: wait-to-test-prod
    uses: crickets-and-comb/shared/.github/workflows/test_install.yml@main
    with:
      TEST_OR_PROD: 'prod'
    secrets:
      CHECKOUT_SHARED: ${{ secrets.CHECKOUT_SHARED }}

  deploy-docs:
    name: Deploy Docs
    needs: [publish-to-pypi, set-inputs]
    uses: crickets-and-comb/shared/.github/workflows/deploy_docs.yml@main
    with:
      PYTHON_BUILD_VERSION: ${{ needs.set-inputs.outputs.PYTHON_BUILD_VERSION }}
    permissions:
      id-token: write
      contents: write
    secrets:
      ACTIONS_DEPLOY_KEY: ${{ secrets.ACTIONS_DEPLOY_KEY }}
      CHECKOUT_SHARED: ${{ secrets.CHECKOUT_SHARED }}