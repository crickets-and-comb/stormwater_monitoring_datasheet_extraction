---
description: Python coding standards and best practices.
globs: ["src/**/*.py", "tests/**/*.py"]
alwaysApply: false
---

# Python Coding Standards

## Code Style & Formatting

- Follow PEP 8 style guidelines strictly.
- Use Black for code formatting (configured in shared/pyproject.toml).
- Use isort for import sorting (configured in shared/pyproject.toml).
- Maximum line length: 88 characters (Black default).
- Use 4 spaces for indentation, never tabs.

## Type Hints

- Use type hints for all function parameters and return values.
- Import types from typing module when needed.
- Use Optional[T] for nullable types.
- Use Union[T1, T2] for multiple possible types.
- Use List[T], Dict[K, V], Tuple[T, ...] for collections.
- Where helpful, use type hints in variable/member declarations.
- Use `typing.Final` to typehint constants.
- Use runtime typechecking of arguments and returns, like `typeguard.typechecked` decorator, `pandera.schema`, `pandera.check_types`, or something similar.

## Import Organization

- Group imports: standard library, third-party, local imports.
- Use absolute imports for project modules.
- Avoid wildcard imports (*).
- Import specific functions/classes rather than entire modules.
- Use isort to maintain consistent import ordering.

## Function & Class Design

- Keep functions focused and under 50 lines when possible.
- Use descriptive variable and function names (snake_case).
- Add comprehensive docstrings for all public functions and classes.
- Follow single responsibility principle.
- Use dataclasses for simple data structures.
- Functions should have a single exit point (one return statement).
- Functions should only modify objects within their own scope.
- Type constants as constants: `typing.Final`.

## Self-Documenting Code

- Use meaningful naming conventions for variables, functions, and classes.
- Use docstrings for functions, classes, methods, and modules.
- Comments should never say what the code is doing.
- Comments are for adding context that is not otherwise given.
- Comments should be few and far between.
- Code should be "self-documenting" through clear naming and structure.

## Error Handling

- Use specific exception types rather than bare `except:`.
- Provide meaningful error messages.
- Log errors appropriately for debugging.
- Handle edge cases gracefully.
- Use context managers for resource management.

## Documentation

- Add docstrings for all public APIs.
- Include parameter types and return types in docstrings.
- Provide usage examples in docstrings.
- Document any complex algorithms or business logic.
- Follow [Google Python style guide](https://google.github.io/styleguide/pyguide.html#38-comments-and-docstrings) for docstrings.
- Copy edit all prose: spelling, grammar, fact check, link check.

## Constants & Immutability

- Use `typing.Final` to typehint constants.
- Treat constants as immutable.
- Avoid externalities like the plague.
- Functions should only modify objects within their own scope.

## TODO Management

- Avoid leaving TODOs in code.
- All remaining TODOs should be tagged to an open issue.
- Link TODOs to specific GitHub issues when possible.
- Clean up TODOs when implementing features or fixes.

## QC Tools Integration

- Run `make lint` before committing (Black, isort, flake8).
- Run `make typecheck` for type checking (pytype).
- Run `make security` for vulnerability scanning (bandit, safety).
- Run `make format` to auto-format code.
- Run `make clean` to clear caches before testing.

## Development Workflow

- Use conda environments for development.
- Install package in editable mode: `make install`.
- Run `make full` for complete QC and testing.
- Use `make full-qc` for quality checks only.
- Use `make full-test` for testing only.
- Run `make clean format full` before pushing.

## Performance Considerations

- Use efficient data structures for large datasets.
- Consider memory usage for large PDF processing.
- Profile code when performance is critical.
- Use async/await for I/O operations when appropriate.
- Cache expensive computations when possible.
