---
description: Python coding standards and best practices.
globs: ["**/*.py"]
alwaysApply: false
---

# Python Coding Standards

## Code Style & Formatting

- Follow PEP 8 style guidelines strictly.
- Use `make clean format` to apply style and import sorting.
- Use `make clean lint` to check style.

## Type Hints

- Use type hints for all function parameters and return values.
- Import types from the `typing` module and elsewhere when needed.
- Where helpful, use type hints in variable/member declarations.
- Be as specific as possible with typehints.
- Use `typing.Final` to typehint constants.
- Use runtime typechecking of arguments and returns, e.g. `typeguard.typechecked` decorator, `pandera.schema` to typehint parameters and returns, `pandera.check_types` decorator when parameters and returns include pandera schema (so the other parameters and returns also get checked by `pydantic`), or something similar.

## Import Organization

- Use absolute imports for project modules.
- Avoid wildcard imports (*).
- Import specific functions/classes rather than entire modules.

## Function & Class Design

- Keep functions focused and under 50 lines when possible.
- Use descriptive variable and function names, with snake_case.
- Add comprehensive docstrings for all public functions and classes.
- Follow single responsibility principle.
- Use dataclasses for simple data structures.
- Functions should have a single exit point (one return statement).
- Functions should only modify objects within their own scope.

## Self-Documenting Code

- Code should be "self-documenting" through clear naming and structure.
- Use meaningful naming conventions for variables, functions, classes, and modules.
- Use docstrings for functions, classes, methods, and modules.
- Use `#:` comments to add docstrings for class member declarations. The `#:` syntax is specific to Sphinx documentation and is used to document attributes within a class. For more details, refer to the [Sphinx documentation](https://www.sphinx-doc.org/en/master/usage/restructuredtext/domains.html#python-domain).
    Example:
    ```python
    class Example:
        #: This is a docstring for the `attribute` member.
        attribute: int
    ```
- Other than class member doctring comments, comments:
    - Should never say what the code is doing.
    - Are for adding context that is not otherwise given.
    - Should be few and far between.

## Error Handling

- Use specific exception types rather than bare `except:`.
- Create custom error classes as needed.
- Provide meaningful error messages.
- Log errors appropriately for debugging.
- Handle edge cases gracefully.
- Use context managers for resource management.

## Documentation

- Add comprehensive docstrings for all public functions and classes.
- *Do not* include parameter types and return types in docstrings (typehints should render in docs).
- Use docstrings for functions, classes, methods, and modules.
- Use `#:` comments to add docstrings for class member declarations.
- Provide usage examples in docstrings (optional).
- Document any complex algorithms or business logic in the external docs.
- Follow [Google Python style guide](https://google.github.io/styleguide/pyguide.html#38-comments-and-docstrings) for docstrings.
- Copy edit all prose: spelling, grammar, fact check, link check.

## Constants & Immutability

- Use `typing.Final` to typehint constants.
- Treat constants as immutable.
- Avoid externalities like the plague.
- Functions should only modify objects within their own scope.

## TODO Management

- Avoid leaving TODOs in code.
- All remaining TODOs should be tagged to an open issue.
- Link TODOs to specific GitHub issues when possible.
- Clean up TODOs when implementing features or fixes.

## Performance Considerations

- Use efficient data structures for large datasets.
- Consider memory usage for large image processing.
- Profile code when performance is critical.
- Use async/await for I/O operations when appropriate.
- Cache expensive computations when possible.
