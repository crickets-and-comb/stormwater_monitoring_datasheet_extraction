---
description: Development and git workflow and version control practices.
alwaysApply: false
---
# Git Workflow

## Git Configuration

- Set up proper user name and email.
- Configure GPG signing for commits.
- Set up SSH keys for GitHub access.

## Best Practices

- Never commit directly to main branch.
- Keep commits focused and logical.
- Write clear, descriptive commit messages.
- Use branches for experimental work.
- Regular commits help with code review.
- Document complex changes thoroughly.

## Branching Strategy

- Use feature branches for new work: `feature/username/description`.
- Use descriptive branch names that explain the purpose.
- Create branches from `main` for new features. Or, you may occasionally want to create a dev branch from `main` with multiple feature branches from your dev branch, with the feature branches to be merged back into the dev branch and the dev branch to finally be merged back into main.
- Keep branches focused on single features or fixes.
- Never merge directly to `main`; only merge to `main` by a pull request.
- Delete branches after merging.

## Shared Submodule Management

- Update shared submodule: `git submodule update --remote --merge`.
- Commit submodule updates to track changes.
- Use shared tools for QC and testing workflows.
- Follow shared repository conventions.
- Keep shared submodule up to date.

## Dev environment setup

- Use conda environments for development:
```bash
    make build-env
    conda activate <package name>_py<python major.minor version>
    make install
```

## Commit Standards

- Make atomic commits (one logical change per commit).
- Commit frequently to avoid large, complex commits.
- Include relevant files only.
- Review changes before committing.

## Pre-commit Checklist

- It's best if you run `make clean format full` to run QC, tests, and builds. But, you may have reason to commit without passing the build steps. In that case:
    - Run `make clean format full-qc full-test`. But, you may have reason to commit without passing tests. In that case:
        - Run `make clean format full-qc`. But, you may have reason to commit without passing QC. In that case:
            - Run `make clean format lint` at a bare minimum, and ensure you've passed lint.
- Run `make clean format lint` at a bare minimum if you have justifiable reason to skip QC, testing, and building -- and ensure you've passed lint.

## Commit Messages

- Use descriptive commit messages in present tense.
- Start with a verb, e.g.: "Add", "Fix", "Update", "Refactor", "Remove".
- Keep first line under 50 characters.
- Add detailed description for complex changes.
- Reference issues when applicable.

## Pull Request Process

- Update documentation as appropriate.
- Update tests as appropriate.
- Run `make full`, and ensure you've passed all steps, before opening a PR or pushing to an open PR.
- Create PRs for all changes to main branch.
- Use descriptive PR titles and descriptions.
- Include context about the change and why it's needed.
- Reference related issues or discussions.
- Request reviews from appropriate team members.

## Code Review

- Review all code changes before merging.
- Check for code quality and standards compliance.
- Verify coverage is maintained.
- Ensure documentation is updated.
- Look for security implications.
- Verify GitHub Actions workflows pass.

## Conflict Resolution

- Before merging, pull target branch into feature branch, or rebase feature branches on target branch.
- Resolve conflicts carefully and test thoroughly.
- Communicate with team about complex conflicts.
- Use `git status` to understand conflict state.
- Test by running `make full` after resolving conflicts.

## Release Process

- Use semantic versioning for releases.
- Create release branches for major changes.
- Tag releases with descriptive messages.
- Update CHANGELOG.md for significant changes.
- Test release packages before publishing.
