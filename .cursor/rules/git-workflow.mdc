---
description: Git workflow and version control practices.
alwaysApply: true
---

# Git Workflow

## Branching Strategy

- Use feature branches for new work: `feature/username/description`.
- Use descriptive branch names that explain the purpose.
- Create branches from `main` for new features.
- Keep branches focused on single features or fixes.
- Delete branches after merging.

## Commit Messages

- Use descriptive commit messages in present tense.
- Start with a verb: "Add", "Fix", "Update", "Refactor", "Remove".
- Keep first line under 50 characters.
- Add detailed description for complex changes.
- Reference issues when applicable.

## Commit Standards

- Make atomic commits (one logical change per commit).
- Commit frequently to avoid large, complex commits.
- Test before committing (run `make full`).
- Include relevant files only.
- Use `git add -p` to review changes before committing.

## Pull Request Process

- Create PRs for all changes to main branch.
- Use descriptive PR titles and descriptions.
- Include context about the change and why it's needed.
- Reference related issues or discussions.
- Request reviews from appropriate team members.

## Code Review

- Review all code changes before merging.
- Check for code quality and standards compliance.
- Verify tests pass and coverage is maintained.
- Ensure documentation is updated.
- Look for security implications.

## Shared Submodule Management

- Update shared submodule: `git submodule update --remote --merge`.
- Commit submodule updates to track changes.
- Use shared tools for QC and testing workflows.
- Follow shared repository conventions.
- Keep shared submodule up to date.

## Pre-commit Checklist

- Run `make clean format full` before pushing.
- Ensure all tests pass locally.
- Check that linting passes (`make lint`).
- Verify type checking passes (`make typecheck`).
- Confirm security scan passes (`make security`).

## Conflict Resolution

- Rebase feature branches on main before merging.
- Resolve conflicts carefully and test thoroughly.
- Communicate with team about complex conflicts.
- Use `git status` to understand conflict state.
- Test after resolving conflicts.

## Release Process

- Use semantic versioning for releases.
- Create release branches for major changes.
- Tag releases with descriptive messages.
- Update CHANGELOG.md for significant changes.
- Test release packages before publishing.

## Git Configuration

- Set up proper user name and email.
- Configure GPG signing for commits (optional).
- Set up SSH keys for GitHub access.
- Configure git aliases for common commands.
- Use git hooks for automated checks.

## Best Practices

- Never commit directly to main branch.
- Keep commits focused and logical.
- Write clear, descriptive commit messages.
- Use branches for experimental work.
- Regular commits help with code review.
- Document complex changes thoroughly.
- Regular commits help with code review.
- Document complex changes thoroughly.
